#lang scheme

(provide write-out)

(define (wrap code)
  (format 
   "; Code generated by april20
@.str = private constant [4 x i8] c\"%d\\0A\\00\", align 1

define i32 @ident (i32 %n) {
entry:
  ret i32 %n
}

define i32 @main(i32 %argc, i8** nocapture %argv) nounwind {
entry:
  ;; Start generated code
  ~a
  ;; End generated code
  %printResult = call i32 (i8*, ...)*
       @printf (i8* noalias getelementptr inbounds 
                  ([4 x i8]* @.str, i64 0, i64 0),
                  i32 %result) nounwind

  ; It turns out Unix return codes are modulo 256.
  ret i32 0
}

declare i32 @printf(i8* nocapture, ...) nounwind
" code))

;; write-out :: list-of string -> something
(define (write-out los filename)
  (let* ([merged (apply string-append
                         (map (Î» (s)
                                (string-append s "\n"))
                              los))]
         [wrapped (wrap merged)]
         [filename (format "april20-~a.ll" filename)]
         )
    (let ([op (open-output-file filename #:mode 'text #:exists 'replace)])
      (fprintf op wrapped)
      (close-output-port op)
      )))