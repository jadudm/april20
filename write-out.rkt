#lang scheme

(provide write-out)

(define (wrap code)
  (format 
   "; Code generated by april20
target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"
target triple = \"x86_64-linux-gnu\"

@.str = private constant [4 x i8] c\"%d\0A\00\", align 1 ; <[4 x i8]*> [#uses=1]

define i32 @main(i32 %argc, i8** nocapture %argv) nounwind {
entry:
  ;; Start generated code
  ~a
  ;; End generated code

  %0 = tail call i32 (i8*, ...)* @printf(i8* noalias getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i32 %result) nounwind ; <i32> [#uses=0]
  ret i32 undef
}

declare i32 @printf(i8* nocapture, ...) nounwind" code))

;; write-out :: list-of string -> something
(define (write-out los)
  (let* ([merged (apply string-append
                         (map (Î» (s)
                                (string-append s "\n"))
                              los))]
         [wrapped (wrap merged)])
    (let ([op (open-output-file "april20.llvm" #:mode 'text #:exists 'replace)])
      (fprintf op wrapped)
      (close-output-port op)
      )))